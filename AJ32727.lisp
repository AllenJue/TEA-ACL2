(include-book "arithmetic-5/top" :dir :system)


;; Constants
(defconst *delta* #x9E3779B9)
(defconst *mod32* #x100000000)


(defund tea-encrypt-step (v0 v1 k0 k1 k2 k3 sum)
  (declare (xargs :guard (and (natp v0) (< v0 *mod32*)
                              (natp v1) (< v1 *mod32*)
                              (natp k0) (< k0 *mod32*)
                              (natp k1) (< k1 *mod32*)
                              (natp k2) (< k2 *mod32*)
                              (natp k3) (< k3 *mod32*)
                              (natp sum) (< sum *mod32*))))
  (list
   (mod (+ v0 (logxor (+ (ash v1 4) k0)
                      (+ v1 (mod (+ sum *delta*) *mod32*))
                      (+ (ash v1 -5) k1)))
        *mod32*)
   (mod (+ v1 (logxor (+ (ash (mod (+ v0 (logxor (+ (ash v1 4) k0)
                                                (+ v1 (mod (+ sum *delta*) *mod32*))
                                                (+ (ash v1 -5) k1)))
                                     *mod32*) 4) k2)
                      (+ (mod (+ v0 (logxor (+ (ash v1 4) k0)
                                           (+ v1 (mod (+ sum *delta*) *mod32*))
                                           (+ (ash v1 -5) k1)))
                              *mod32*) (mod (+ sum *delta*) *mod32*))
                      (+ (ash (mod (+ v0 (logxor (+ (ash v1 4) k0)
                                                (+ v1 (mod (+ sum *delta*) *mod32*))
                                                (+ (ash v1 -5) k1)))
                                   *mod32*) -5) k3)))
        *mod32*)
   (mod (+ sum *delta*) *mod32*)))


(defund tea-decrypt-step (v0 v1 k0 k1 k2 k3 sum)
  (declare (xargs :guard (and (integerp v0)
                              (integerp v1)
                              (integerp k0)
                              (integerp k1)
                              (integerp k2)
                              (integerp k3)
                              (integerp sum))))
  (list
   (mod (- v0 (logxor (+ (ash (mod (- v1 (logxor (+ (ash v0 4) k2)
                                                (+ v0 sum)
                                                (+ (ash v0 -5) k3)))
                                     *mod32*) 4) k0)
                      (+ (mod (- v1 (logxor (+ (ash v0 4) k2)
                                           (+ v0 sum)
                                           (+ (ash v0 -5) k3)))
                              *mod32*) sum)
                      (+ (ash (mod (- v1 (logxor (+ (ash v0 4) k2)
                                                (+ v0 sum)
                                                (+ (ash v0 -5) k3)))
                                   *mod32*) -5) k1)))
        *mod32*)
   (mod (- v1 (logxor (+ (ash v0 4) k2)
                     (+ v0 sum)
                     (+ (ash v0 -5) k3)))
        *mod32*)
   (mod (- sum *delta*) *mod32*)))



(defthm tea-step-invertible
  (implies (and (natp v0) (< v0 *mod32*)
                (natp v1) (< v1 *mod32*)
                (natp k0) (< k0 *mod32*)
                (natp k1) (< k1 *mod32*)
                (natp k2) (< k2 *mod32*)
                (natp k3) (< k3 *mod32*)
                (natp sum) (< sum *mod32*))
           (and (equal (car (tea-decrypt-step 
                                              (car (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))
                                              (cadr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))
                                              k0 k1 k2 k3 
                                              (caddr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))))
                    v0)
                (equal (cadr (tea-decrypt-step 
                                              (car (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))
                                              (cadr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))
                                              k0 k1 k2 k3 
                                              (caddr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))))
                       v1)
                (equal (caddr (tea-decrypt-step 
                                              (car (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))
                                              (cadr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))
                                              k0 k1 k2 k3 
                                              (caddr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum))))
                          sum)))
      :hints (("Goal" :in-theory (enable tea-encrypt-step tea-decrypt-step))))

;; Need some helper lemmas to prove that tea-encrypt and tea-decrypt guards

;; Lemma 1: Modular reduction preserves 32-bit bounds
(defthmd mod-32-bound
  (implies (integerp x)
          (and (<= 0 (mod x *mod32*))
                (< (mod x *mod32*) *mod32*))))

;; Lemma 2: LogXOR is integer
(defthmd logxor-integerp
  (implies (and (integerp a)
                (integerp b))
          (integerp (logxor a b))))

(defthmd logxor-32-bound
  (implies (and (integerp a)
                (integerp b))
            (and (<= 0 (mod (logxor a b) *mod32*))
                (< (mod (logxor a b) *mod32*) *mod32*))))

;; Lemma 3: Arithmetic shift within 32-bit bounds
(defthmd ash-32-bound
  (implies (and (natp x) (< x *mod32*)
                (integerp shift))
          (<= 0 (ash x shift))))

(defthm tea-encrypt-step-preserves-types
  (implies (and (and (integerp v0)
                     (integerp v1)
                     (integerp k0)
                     (integerp k1)
                     (integerp k2)
                     (integerp k3)
                     (integerp sum)))
          (and (natp (car (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum)))
                (< (car (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum)) *mod32*)
                (natp (cadr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum)))
                (< (cadr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum)) *mod32*)
                (natp (caddr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum)))
                (< (caddr (tea-encrypt-step v0 v1 k0 k1 k2 k3 sum)) *mod32*)))
  :hints (("Goal" :in-theory (enable tea-encrypt-step))))

(defthm tea-decrypt-step-preserves-types
  (implies (and (and (integerp v0)
                      (integerp v1)
                      (integerp k0)
                      (integerp k1)
                      (integerp k2)
                      (integerp k3)
                      (integerp sum)))
          (and (natp (car (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum)))
                (< (car (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum)) *mod32*)
                (natp (cadr (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum)))
                (< (cadr (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum)) *mod32*)
                (natp (caddr (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum)))
                (< (caddr (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum)) *mod32*)))
  :hints (("Goal" :in-theory (enable tea-decrypt-step))))

 (defun tea-encrypt (v0 v1 k0 k1 k2 k3 sum n)
  (declare (xargs   :verify-guards nil
                    :guard (and (natp v0) (< v0 *mod32*)
                                (natp v1) (< v1 *mod32*)
                                (natp k0) (< k0 *mod32*)
                                (natp k1) (< k1 *mod32*)
                                (natp k2) (< k2 *mod32*)
                                (natp k3) (< k3 *mod32*)
                                (natp sum) (< sum *mod32*)
                                (natp n))))
  (if (zp n)
      (list v0 v1 sum)
    (tea-encrypt-step
      (car (tea-encrypt v0 v1 k0 k1 k2 k3 sum (1- n)))
      (cadr (tea-encrypt v0 v1 k0 k1 k2 k3 sum (1- n)))
      k0 k1 k2 k3
      (caddr (tea-encrypt v0 v1 k0 k1 k2 k3 sum (1- n))))))

(defun tea-decrypt (v0 v1 k0 k1 k2 k3 sum n)
  (declare (xargs   :verify-guards nil
                    :guard (and (natp v0) (< v0 *mod32*)
                                (natp v1) (< v1 *mod32*)
                                (natp k0) (< k0 *mod32*)
                                (natp k1) (< k1 *mod32*)
                                (natp k2) (< k2 *mod32*)
                                (natp k3) (< k3 *mod32*)
                                (natp sum) (< sum *mod32*)
                                (natp n))))
  (if (zp n)
      (list v0 v1 sum)
    (tea-decrypt 
     (car (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum))
     (cadr (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum))
     k0 k1 k2 k3
     (caddr (tea-decrypt-step v0 v1 k0 k1 k2 k3 sum))
     (1- n))))

(defthm tea-encrypt-type-preservation
  (implies (and (natp v0) (< v0 *mod32*)
                (natp v1) (< v1 *mod32*)
                (natp k0) (< k0 *mod32*)
                (natp k1) (< k1 *mod32*)
                (natp k2) (< k2 *mod32*)
                (natp k3) (< k3 *mod32*)
                (natp sum) (< sum *mod32*))
          (and (natp (car (tea-encrypt v0 v1 k0 k1 k2 k3 sum n)))
                (< (car (tea-encrypt v0 v1 k0 k1 k2 k3 sum n)) *mod32*)
                (natp (cadr (tea-encrypt v0 v1 k0 k1 k2 k3 sum n)))
                (< (cadr (tea-encrypt v0 v1 k0 k1 k2 k3 sum n)) *mod32*)
                (natp (caddr (tea-encrypt v0 v1 k0 k1 k2 k3 sum n)))
                (< (caddr (tea-encrypt v0 v1 k0 k1 k2 k3 sum n)) *mod32*)))
    :hints (("Goal" :in-theory (enable tea-encrypt-step-preserves-types))))

(defthm tea-decrypt-type-preservation
  (implies (and (natp v0) (< v0 *mod32*)
                (natp v1) (< v1 *mod32*)
                (natp k0) (< k0 *mod32*)
                (natp k1) (< k1 *mod32*)
                (natp k2) (< k2 *mod32*)
                (natp k3) (< k3 *mod32*)
                (natp sum) (< sum *mod32*))
          (and (natp (car (tea-decrypt v0 v1 k0 k1 k2 k3 sum n)))
                (< (car (tea-decrypt v0 v1 k0 k1 k2 k3 sum n)) *mod32*)
                (natp (cadr (tea-decrypt v0 v1 k0 k1 k2 k3 sum n)))
                (< (cadr (tea-decrypt v0 v1 k0 k1 k2 k3 sum n)) *mod32*)
                (natp (caddr (tea-decrypt v0 v1 k0 k1 k2 k3 sum n)))
                (< (caddr (tea-decrypt v0 v1 k0 k1 k2 k3 sum n)) *mod32*)))
  :hints (("Goal" :in-theory (enable tea-decrypt-step-preserves-types))))


(verify-guards tea-encrypt)
(verify-guards tea-decrypt)




     



(DEFTHM TEA-N-ROUNDS-INVERTIBLE
 (IMPLIES
  (AND (NATP V0)
       (< V0 *MOD32*)
       (NATP V1)
       (< V1 *MOD32*)
       (NATP K0)
       (< K0 *MOD32*)
       (NATP K1)
       (< K1 *MOD32*)
       (NATP K2)
       (< K2 *MOD32*)
       (NATP K3)
       (< K3 *MOD32*)
       (NATP SUM)
       (< SUM *MOD32*)
       (NATP N))
  (AND
     (EQUAL (CAR (TEA-DECRYPT (CAR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                              (CADR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                              K0 K1 K2 K3
                              (CADDR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                              N))
            V0)
     (EQUAL (CADR (TEA-DECRYPT (CAR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                               (CADR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                               K0 K1 K2 K3
                               (CADDR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                               N))
            V1)
     (EQUAL (CADDR (TEA-DECRYPT (CAR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                                (CADR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                                K0 K1 K2 K3
                                (CADDR (TEA-ENCRYPT V0 V1 K0 K1 K2 K3 SUM N))
                                N))
            SUM)))
 :INSTRUCTIONS (:INDUCT (:CHANGE-GOAL NIL T)
                        :S (:DEMOTE 2)
                        (:DV 1)
                        :S :UP :PROMOTE :PROMOTE (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X :UP :UP :UP (:DV 7)
                        (:DV 1)
                        :X (:UP 3)
                        :UP :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP (:DV 2)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X :UP :UP :UP (:DV 7)
                        (:DV 1)
                        :X (:UP 3)
                        :UP
                        :UP :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP :UP (:DV 1)
                        (:DV 7)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X :UP :UP :UP (:DV 7)
                        (:DV 1)
                        :X (:UP 4)
                        :UP
                        :UP :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP :UP :UP :S :NX (:DV 1)
                        (:DV 1)
                        :X (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X (:UP 3)
                        (:DV 7)
                        (:DV 1)
                        :X (:UP 4)
                        :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP (:DV 2)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X (:UP 3)
                        (:DV 7)
                        (:DV 1)
                        :X (:UP 4)
                        :UP :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP (:DV 7)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X (:UP 3)
                        (:DV 7)
                        (:DV 1)
                        :X (:UP 4)
                        (:UP 2)
                        :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP :UP :UP :UP :UP :TOP (:DV 1)
                        :UP (:DV 2)
                        (:DV 1)
                        (:DV 1)
                        :UP :TOP :S (:DV 1)
                        (:DV 1)
                        :X :UP (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X (:UP 3)
                        (:DV 7)
                        (:DV 1)
                        :X (:UP 4)
                        :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP :UP :UP :UP (:DV 1)
                        (:DV 2)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X (:UP 3)
                        (:DV 7)
                        (:DV 1)
                        :X (:UP 4)
                        :UP :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        (:UP 3)
                        (:DV 1)
                        (:DV 7)
                        (:DV 1)
                        (:DV 1)
                        (:DV 1)
                        :X :UP :NX (:DV 1)
                        :X (:UP 3)
                        (:DV 7)
                        (:DV 1)
                        :X (:UP 5)
                        :UP :UP (:REWRITE TEA-STEP-INVERTIBLE)
                        :UP :UP :UP :UP :UP :S (:DV 1)
                        (:DV 1)
                        :TOP
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        :PROVE
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)
                        (:REWRITE TEA-ENCRYPT-TYPE-PRESERVATION)))
